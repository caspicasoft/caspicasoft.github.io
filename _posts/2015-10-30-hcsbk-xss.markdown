---
layout: post
title: "Уязвимость в Жилстройсбербанк (XSS)"
date: '2015-10-30T13:45:27+06:00'
categories: bank security xss
about: 'about.html'
---
*Update:* Теперь исправлено

Сразу скажу, что я сообщил об этом дефекте разработчику сайта, ibecsystems, 16 дней назад. К сожалению, мое письмо осталось без ответа, а уязвимость 
не была устранена до сих пор. Сегодня напишу детали проблемы в учебных целях (может это как-то ускорит процесс).
<!--more-->

Разработчики умеют делать все правильно: всегда проверять данные контролируемые клиентом и обрабатывать все параметры запросов на сервере. 
Также нужно уследить за библиотеками в клиентской части. В случае же Жилстройсбербанка, разработчики забыли сделать и первое и второе.


>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте 
(без вашего разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

На сайте банка есть простой поиск. Давайте сделаем запрос:
![image][img0]

Посмотрим что у нас в коде страницы. Интересно, что текст запроса (включая опасные символы *“/&gt;*) появился в двух местах.
![image][img1]

Попробуем получить результаты поиска.
![image][img2]

Находим текст запроса без обработки.
![image][img3]

Что видит пользователя.
![image][img4]

Теперь можно сделать запрос с javascript. 
![image][img5]

Но это слишком легко. К тому же, браузеры с XSS аудиторами, такие как Chrome и Opera, откажутся выполнять наш alert(), потому что скрипт, 
оказавшийся на странице, находился в параметре запроса.

Нам лучше сосредоточится на этом участке кода с jQuery. Мы хотим выполнить код после *$(&rsquo;.search&rsquo;).val()*.


Это значит нужно “пройти” все *$(&rsquo;#search_results&rsquo;).highlight()* без ошибок.
![image][img6]

Первая попытка. Результат такого запроса содержит ошибку и не выполняется браузером.
![image][img7]

После перебора нескольких вариантов, я смог найти хороший payload.

>hxxp://www.hcsbk.kz/ru/search?query=&rsquo;);alert(&ldquo;wow&rdquo;);//

![image][img8]

Код выполняется без ошибок. Имейте ввиду, что в этом случае XSS аудитор браузера вам не поможет.
![image][img9]

Кто-то может подумать
“*Туууй,тоже маған катастрофа! Это же главная страница банка, а не чей-то личный кабинет!*”. 

Да, это не <s>ключ от квартиры, где деньги лежат</s> личный кабинет, но близко.
К тому же я не смотрел код личного кабинета банка, но у меня плохое предчувствие: банк не поддерживает HTTPS. 

Если соединение небезопасно, это значит ваш ИИН, пароль и все что внутри кабинета видно всему свету (от браузера до сервера банка и обратно).
![image][img10]
XSS это идеальное средство для мошенников.

Отправьте письмо с ссылкой на сайт банка + xss payload. Когда пользователь заполнит форму и логин/пароль
от личного кабинета, эти данные попадут на сервер мошенников. Все это будет происходить на
сайте банка.

ibecsystems нужно исправить этот дефект и проверить код сайта на другие проблемы.
Банк должен подумать о переходе на HTTPS и необходимости Content Security Policy.


Раньше разработчики не воспринимали XSS всерьез, но сейчас все понимают, что XSS - это критическая уязвимость на стороне клиента. Позже я напишу пост
о том, что можно сделать с помощью браузера пользователя, XSS, и BeEF.

[img0]: /assets/images/{{page.slug}}/img0.png
[img1]: /assets/images/{{page.slug}}/img1.png
[img2]: /assets/images/{{page.slug}}/img2.png
[img3]: /assets/images/{{page.slug}}/img3.png
[img4]: /assets/images/{{page.slug}}/img4.png
[img5]: /assets/images/{{page.slug}}/img5.png
[img6]: /assets/images/{{page.slug}}/img6.png
[img7]: /assets/images/{{page.slug}}/img7.png
[img8]: /assets/images/{{page.slug}}/img8.png
[img9]: /assets/images/{{page.slug}}/img9.png
[img10]: /assets/images/{{page.slug}}/img10.png
